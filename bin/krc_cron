#!/usr/bin/env php
<?php

require_once(dirname(__FILE__)."/../lib/init.php");
require_once(dirname(__FILE__)."/../lib/ArgumentParser.php");

$usage = "Usage:

  ".$argv[0]." --cron-freq-hours=<hours> [--override-run-time=<DateTime string>]

Options:
  --cron-freq-hours=<hours> (Required)
            A positive integer number of hours between cron runs.
            Used to define the window to match recurrences against.

  --override-run-time=<DateTime string> (Optional)
            A DateTime string like '2016-03-20 08:03'.
            Used to test/simulate a cron-run at a different date.

  --test
            Do not create cards that match, but rather print out information
            about which cards would be created.

";

try {
  $options = getOptionArray(__FILE__, $argv);
} catch (Exception $e) {
  fwrite(STDERR, $e->getMessage()."\n\n");
  fwrite(STDERR, $usage);
  exit(1);
}
$allowed_options = array(
  'cron-freq-hours' => true,
  'override-run-time' => true,
  'test' => true,
);
$unknown_options = array_diff_key($options, $allowed_options);
if (count($unknown_options) > 0) {
  fwrite(STDERR, "Error, unknown options: ".implode(', ', array_keys($unknown_options))."\n\n");
  fwrite(STDERR, $usage);
  exit(1);
}
// cron-freq-hours
if (empty($options['cron-freq-hours'])
  || filter_var($options['cron-freq-hours'], FILTER_VALIDATE_INT, array('options' => array('min_range' => 1))) === false)
{
  fwrite(STDERR, $usage);
  exit(1);
} else {
  $cron_freq_hours = $options['cron-freq-hours'];
}
// override-run-time
if (empty($options['override-run-time'])) {
  $now = new DateTime();
} else {
  try {
    $now = new DateTime($options['override-run-time']);
  } catch (Exception $e) {
    fwrite(STDERR, 'Invalid --override-run-time option: '.$e->getMessage()."\n\n");
    fwrite(STDERR, $usage);
    exit(1);
  }
}
// test
if (empty($options['test'])) {
  $testing = false;
} else {
  $testing = true;
}

$start = new DateTime($now->format('Y-m-d H:00:00'));
$end = new DateTime($now->format('Y-m-d H:00:00'));
$end->add(new DateInterval('PT'.($cron_freq_hours - 1).'H59M59S'));

$data_dir = realpath(dirname(__FILE__)."/../cards");
$data_files = scandir($data_dir);
foreach ($data_files as $file) {
  if (preg_match('/.+\.json$/i', $file)) {
    try {
      $data = json_decode(file_get_contents($data_dir.'/'.$file), true);
      if (is_null($data)) {
        throw new Exception("Error decoding json data from $data_dir/$file");
      }
      $card = new \KanbanizeRecurringCards\Card($data);
      if ($card->recurrsBetween($start, $end)) {
        if ($testing) {
          print "Add card from: $file\n";
        } else {
          $card->addToKanbanize($kanbanize);
        }
      }
    } catch (Exception $e) {
      fwrite(STDERR, "Error checking/adding card defined in $data_dir/$file: ".$e->getMessage()."\n");
    }
  }
}

exit(0);
