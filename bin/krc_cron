#!/usr/bin/env php
<?php

require_once(dirname(__FILE__)."/../lib/init.php");
require_once(dirname(__FILE__)."/../lib/ArgumentParser.php");

$usage = "Usage:

  ".$argv[0]." --cron_freq_hours=<hours>

Options:
  --cron_freq_hours=<hours>    An integer number of hours between cron runs. Used to
                               define the window to match recurrences against.

";

try {
  $options = getOptionArray(__FILE__, $argv);
} catch (Exception $e) {
  fwrite(STDERR, $e->getMessage()."\n\n");
  fwrite(STDERR, $usage);
  exit(1);
}
$filter_int_options = array('min_range' => 1);
if (empty($options['cron_freq_hours']) || filter_var($options['cron_freq_hours'], FILTER_VALIDATE_INT, $options) === false) {
  fwrite(STDERR, $usage);
  exit(1);
} else {
  $cron_freq_hours = $options['cron_freq_hours'];
}

$now = new DateTime();
$start = new DateTime($now->format('Y-m-d H:00:00'));
$end = new DateTime($now->format('Y-m-d H:00:00'));
$end->add(new DateInterval('PT'.($cron_freq_hours - 1).'H59M59S'));

$data_dir = realpath(dirname(__FILE__)."/../cards");
$data_files = scandir($data_dir);
foreach ($data_files as $file) {
  if (preg_match('/.+\.json$/i', $file)) {
    try {
      $data = json_decode(file_get_contents($data_dir.'/'.$file), true);
      if (is_null($data)) {
        throw new Exception("Error decoding json data from $data_dir/$file");
      }
      $card = new \KanbanizeRecurringCards\Card($data);
      if ($card->recurrsBetween($start, $end)) {
        $card->addToKanbanize($kanbanize);
      }
    } catch (Exception $e) {
      fwrite(STDERR, "Error checking/adding card defined in $data_dir/$file: ".$e->getMessage()."\n");
    }
  }
}

exit(0);
